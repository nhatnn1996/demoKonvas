{"version":3,"sources":["serviceWorker.js","components/landscape/index.js","components/ribbon/index.js","components/boxfocus/index.js","mock/movies.js","services/keyService.js","index.js"],"names":["Boolean","window","location","hostname","match","LandScape","props","useImage","src","offsetX","index","x","width","height","image","Ribbon","movies","map","item","i","key","id","BoxFocus","sceneFunc","ctx","shape","strokeStyle","lineWidth","strokeRect","glxplay","platform","NUMBER","RETURN","ENTER","UP","DOWN","LEFT","RIGHT","ZERO","ONE","TWO","THREE","FOUR","FIVE","SIX","SEVEN","EIGHT","NINE","_","extend","PAGE_UP","PAGE_DOWN","BACKWARD","FORWARD","PLAY","PAUSE","PLAY_PAUSE","STOP","BTVOICE","KeyServices","ColoredRect","state","flag","handleClick","setState","handlePres","e","keyCode","which","KeyCode","addEventListener","this","native","duration","from","shadowBlur","fill","to","Group","y","onClick","React","Component","App","innerWidth","innerHeight","text","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0751109.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { Image } from \"react-konva\";\nimport useImage from \"use-image\";\n\nfunction LandScape(props) {\n  const [src] = useImage(props.src);\n  let offsetX = (322+10) * props.index;\n  return <Image x={offsetX} width={322} height={179} image={src} />;\n}\n\nexport default LandScape;\n","import React from \"react\";\nimport { Group } from \"react-konva\";\nimport LandScape from \"../landscape/index\";\n\nfunction Ribbon(props) {\n  return (\n    <Group>\n      {props.movies.map((item, i) => (\n        <LandScape src={item.src} key={\"id\"+ item.id + i} index={i} />\n      ))}\n    </Group>\n  );\n}\n\nexport default Ribbon;\n","import React from \"react\";\nimport { Shape } from \"react-konva\";\n\nconst BoxFocus = () => {\n  return (\n    <Shape\n      sceneFunc={(ctx, shape) => {\n        ctx.strokeStyle = \"white\";\n        ctx.lineWidth = \"5\"\n        ctx.strokeRect(102, 102, 318, 175);\n      }}\n    />\n  );\n};\n\nexport default BoxFocus;\n","const movies = [\n  {\n    src: \"https://assets.glxplay.io/images/w320/title/hau-due-mat-troi-viet-nam_web_posterLandscape_cad921a4e0fa8a4a6ccb539dd9afef3e.jpg\",\n    id: 1,\n  },\n  {\n    src: \"https://assets.glxplay.io/images/w320/title/ho-so-lua---season-1_web_posterLandscape_4ac94a72705a1a208243404eca5a1dac.jpg\",\n    id: 2,\n  },\n  {\n    src: \"https://assets.glxplay.io/images/w320/title/five-fairies-in-the-house_web_posterLandscape_f6111b6d2779e44fae30c32bd0a5fefa.jpg\",\n    id: 3,\n  },\n  { src: \"https://assets.glxplay.io/images/w320/title/stories-of-fathers_web_posterLandscape_500c47702cd2fb249c6bf2d63c08771a.jpg\", id: 4 },\n  {\n    src: \"https://assets.glxplay.io/images/w320/title/gentlemen-in-competition_web_posterLandscape_7b4eeb43ffd397486e32c9c29e5f7093.jpg\",\n    id: 5,\n  },\n  {\n    src: \"https://assets.glxplay.io/images/w320/title/lan-que-phuong_web_posterLandscape_7a1d079d69e1420110c0850670cbd101.jpg\",\n    id: 6,\n  },\n];\n\nexport default movies","import _ from \"lodash\";\nwindow.glxplay = {};\nwindow.glxplay.platform = \"tv_tizen\";\n\nlet key = {\n  NUMBER: [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n  RETURN: 8,\n  ENTER: 13,\n  UP: 38,\n  DOWN: 40,\n  LEFT: 37,\n  RIGHT: 39,\n  ZERO: 48,\n  ONE: 49,\n  TWO: 50,\n  THREE: 51,\n  FOUR: 52,\n  FIVE: 53,\n  SIX: 54,\n  SEVEN: 55,\n  EIGHT: 56,\n  NINE: 57,\n};\n\nif (window.glxplay.platform === \"tv_tizen\" || window.glxplay.platform === \"tizen_sandbox\") {\n  let keyTizen = {\n    RETURN: 10009,\n    PAGE_UP: 427,\n    PAGE_DOWN: 428,\n    BACKWARD: 412,\n    FORWARD: 417,\n    PLAY: 415,\n    PAUSE: 19,\n    PLAY_PAUSE: 10252,\n    STOP: 413,\n    BTVOICE: 10224,\n  };\n  key = _.extend(key, keyTizen);\n}\n\nif (window.glxplay.platform === \"tv_webos\" || window.glxplay.platform === \"lg_sandbox\") {\n  let keyWebOS = {\n    RETURN: 461,\n    BACKWARD: 412,\n    FORWARD: 417,\n    PAUSE: 19,\n    PLAY: 415,\n    STOP: 413,\n  };\n  key = _.extend(key, keyWebOS);\n}\n\nconst KeyServices = key;\n\nexport default KeyServices;\n","import React, { Component } from \"react\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { render } from \"react-dom\";\nimport { Stage, Layer, Text } from \"react-konva\";\nimport { Spring, animated } from \"react-spring/renderprops-konva\";\nimport Ribbon from \"./components/ribbon\";\nimport BoxFocus from \"./components/boxfocus\";\nimport movies from \"./mock/movies\";\nimport KeyCode from \"./services/keyService\";\n\nwindow.glxplay = {};\nwindow.glxplay.platform = \"tv_tizen\";\n\nclass ColoredRect extends React.Component {\n  state = { flag: false, index: 0, movies: [...movies, ...movies] };\n  handleClick = () => this.setState((state) => ({ flag: !state.flag }));\n\n  handlePres = (e) => {\n    const keyCode = e.keyCode || e.which;\n    if (keyCode === KeyCode.LEFT) {\n      return this.setState((state) => {\n        if (state.index !== 0) {\n          return { index: state.index + 1 };\n        }\n        return {};\n      });\n    }\n    if (keyCode === KeyCode.UP) {\n      //up\n    }\n    if (keyCode === KeyCode.RIGHT) {\n      return this.setState((state) => ({ index: state.index - 1 }));\n    }\n    if (keyCode === KeyCode.DOWN) {\n    }\n  };\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handlePres);\n  }\n  render() {\n    const { index, movies } = this.state;\n    return (\n      <Spring\n        native\n        duration={1000}\n        from={{ x: 100, shadowBlur: 0, fill: \"rgb(10,50,19)\" }}\n        to={{\n          x: (322 + 10) * index + 100,\n        }}\n      >\n        {(props) => (\n          <animated.Group {...props} width={1000} y={100} fill=\"black\" onClick={this.handleClick}>\n            <Ribbon movies={movies} />\n          </animated.Group>\n        )}\n      </Spring>\n    );\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Text text=\"Try clicking the rectangle\" />\n          <ColoredRect></ColoredRect>\n\n          <BoxFocus />\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nrender(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}